package dictionary.runtime.editor;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class TransformationMenuHelper {
  private SNode wordStore;
  public static final String ADD_NEW_NOUN = "Add new concept to store.";
  public static final String DO_NOT_USE_ITEM = "Do not use!";
  public TransformationMenuHelper(SNode wordStore) {
    this.wordStore = wordStore;
  }
  public boolean checkWordExists(final String pattern) {
    return (pattern != null && pattern.length() > 0) && (ListSequence.fromList(SLinkOperations.getChildren(this.wordStore, LINKS.nouns$4ad6)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return Objects.equals(SPropertyOperations.getString(it, PROPS.name$MnvL), pattern);
      }
    }) == null);
  }

  public void addNewNoun(String pattern, SNode node) {
    SNode newWord = createNounWord_4kjenv_a0a0g(pattern);
    ListSequence.fromList(SLinkOperations.getChildren(this.wordStore, LINKS.nouns$4ad6)).addElement(newWord);
    SLinkOperations.setTarget(node, LINKS.originalWord$ho3f, newWord);
  }
  private static SNode createNounWord_4kjenv_a0a0g(String p0) {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.NounWord$Ad);
    n0.setProperty(PROPS.name$MnvL, p0);
    return n0.getResult();
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink nouns$4ad6 = MetaAdapterFactory.getContainmentLink(0x1e23d6051cdb4db4L, 0x810f1fa070d0e977L, 0x3b06478f679138bbL, 0x3b06478f679138c1L, "nouns");
    /*package*/ static final SReferenceLink originalWord$ho3f = MetaAdapterFactory.getReferenceLink(0x1e23d6051cdb4db4L, 0x810f1fa070d0e977L, 0x3019678390111cc8L, 0x197de3ddaba9503bL, "originalWord");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept NounWord$Ad = MetaAdapterFactory.getConcept(0x1e23d6051cdb4db4L, 0x810f1fa070d0e977L, 0x3b06478f679138c0L, "dictionary.structure.NounWord");
  }
}
