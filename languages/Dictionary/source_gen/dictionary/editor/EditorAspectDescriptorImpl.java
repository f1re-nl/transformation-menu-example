package dictionary.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import jetbrains.mps.openapi.editor.descriptor.EditorHintsProvider;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorHint;
import java.util.Arrays;
import jetbrains.mps.editor.runtime.descriptor.ConceptEditorHintImpl;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.openapi.editor.menus.style.EditorMenuItemCustomizer;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase implements EditorHintsProvider {
  private Collection<ConceptEditorHint> myHints = Arrays.<ConceptEditorHint>asList(new ConceptEditorHintImpl("original", "", true, "dictionary.editor.OriginalWordProjectionHint.original"), new ConceptEditorHintImpl("simplified", "", true, "dictionary.editor.OriginalWordProjectionHint.simplified"));
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Definition_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new Dictionary_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new NounWord_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new NounWordRef_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new WordStore_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }

  public Collection<ConceptEditorHint> getHints() {
    return myHints;
  }

  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<TransformationMenu>singletonList(new NounWordRef_TransformationMenu());
      default:
    }
    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new NounWordRef_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<EditorMenuItemCustomizer> getEditorMenuItemCustomizers() {
    return Arrays.asList(new EditorMenuItemCustomizer[]{new IntroduceNewNoun_Styling()});
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x1e23d6051cdb4db4L, 0x810f1fa070d0e977L, 0x3b06478f679138dcL), MetaIdFactory.conceptId(0x1e23d6051cdb4db4L, 0x810f1fa070d0e977L, 0x3019678390138204L), MetaIdFactory.conceptId(0x1e23d6051cdb4db4L, 0x810f1fa070d0e977L, 0x3b06478f679138c0L), MetaIdFactory.conceptId(0x1e23d6051cdb4db4L, 0x810f1fa070d0e977L, 0x3019678390111cc8L), MetaIdFactory.conceptId(0x1e23d6051cdb4db4L, 0x810f1fa070d0e977L, 0x3b06478f679138bbL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x1e23d6051cdb4db4L, 0x810f1fa070d0e977L, 0x3019678390111cc8L)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x1e23d6051cdb4db4L, 0x810f1fa070d0e977L, 0x3019678390111cc8L)).seal();
}
