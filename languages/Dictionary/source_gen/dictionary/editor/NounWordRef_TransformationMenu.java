package dictionary.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.transformation.TransformationMenuBase;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.editor.menus.transformation.MenuLocations;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuItem;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuContext;
import jetbrains.mps.lang.editor.menus.EditorMenuDescriptorBase;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.lang.editor.menus.MenuPart;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.editor.menus.transformation.ReferenceMenuTransformationMenuPart;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.lang.editor.menus.transformation.ReferenceTransformationMenuItem;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cellMenu.SubstituteCompletionActionItem;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.editor.menus.GroupMenuPart;
import jetbrains.mps.util.Computable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Arrays;
import jetbrains.mps.lang.editor.menus.SingleItemMenuPart;
import org.apache.log4j.Logger;
import jetbrains.mps.openapi.editor.menus.transformation.ActionItemBase;
import jetbrains.mps.openapi.editor.menus.EditorMenuTraceInfo;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import jetbrains.mps.lang.core.behavior.BaseConcept__BehaviorDescriptor;
import jetbrains.mps.openapi.editor.menus.style.EditorMenuItemStyle;
import jetbrains.mps.editor.runtime.menus.EditorMenuItemModifyingCustomizationContext;
import jetbrains.mps.editor.runtime.menus.EditorMenuItemCompositeCustomizationContext;
import jetbrains.mps.editor.runtime.completion.CompletionMenuItemCustomizationContext;
import jetbrains.mps.editor.runtime.completion.CompletionItemInformation;
import jetbrains.mps.openapi.editor.menus.style.EditorMenuItemCustomizer;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.smodel.builder.SNodeBuilder;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SProperty;

public class NounWordRef_TransformationMenu extends TransformationMenuBase {
  private final Set<String> myLocations = SetSequence.fromSetAndArray(new HashSet<String>(), MenuLocations.SUBSTITUTE);
  @Override
  public boolean isApplicableToLocation(@NotNull String location) {
    return SetSequence.fromSet(myLocations).contains(location);
  }

  @NotNull
  @Override
  public List<TransformationMenuItem> createMenuItems(@NotNull TransformationMenuContext context) {
    context.getEditorMenuTrace().pushTraceInfo();
    context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("default transformation menu for " + "NounWordRef", new SNodePointer("r:7061a567-a3c0-4126-b0e7-6588543d98ff(dictionary.editor)", "3465915202994348767")));
    try {
      return super.createMenuItems(context);
    } finally {
      context.getEditorMenuTrace().popTraceInfo();
    }
  }

  @Override
  @NotNull
  protected List<MenuPart<TransformationMenuItem, TransformationMenuContext>> getParts(TransformationMenuContext _context) {
    List<MenuPart<TransformationMenuItem, TransformationMenuContext>> result = new ArrayList<MenuPart<TransformationMenuItem, TransformationMenuContext>>();
    if (ListSequence.fromListAndArray(new ArrayList<String>(), MenuLocations.SUBSTITUTE).contains(_context.getMenuLocation())) {
      result.add(new TMP_Reference_z0o12k_a0());
      result.add(new TMP_Group_z0o12k_b0());
    }
    return result;
  }

  public class TMP_Reference_z0o12k_a0 extends ReferenceMenuTransformationMenuPart {
    @NotNull
    @Override
    public List<TransformationMenuItem> createItems(@NotNull TransformationMenuContext context) {
      context.getEditorMenuTrace().pushTraceInfo();
      try {
        SReferenceLink referenceLink = getReferenceLink(context);
        String description = "Include menu for the reference";
        if (referenceLink != null) {
          description += ": " + referenceLink.getName();
        }
        context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase(description, new SNodePointer("r:7061a567-a3c0-4126-b0e7-6588543d98ff(dictionary.editor)", "3465915202994348777")));
        return super.createItems(context);
      } finally {
        context.getEditorMenuTrace().popTraceInfo();
      }
    }

    @NotNull
    @Override
    protected ReferenceTransformationMenuItem createItem(@NotNull TransformationMenuContext context, @NotNull SReferenceLink referenceLink, final SNode targetNode) {
      return new Item(referenceLink, targetNode, context);
    }
    private class Item extends ReferenceTransformationMenuItem implements SubstituteCompletionActionItem {
      private final TransformationMenuContext _context;
      private final SNode targetNode;
      private Item(SReferenceLink link, SNode _targetNode, TransformationMenuContext context) {
        super(link, _targetNode, context);
        targetNode = _targetNode;
        _context = context;
      }



    }
    @Override
    protected SReferenceLink getReferenceLink(TransformationMenuContext context) {
      return LINKS.originalWord$3zic;
    }
    @Nullable
    @Override
    protected SAbstractConcept getTargetConcept(TransformationMenuContext context) {
      return CONCEPTS.NounWord$Ad;
    }
  }
  public class TMP_Group_z0o12k_b0 extends GroupMenuPart<TransformationMenuItem, TransformationMenuContext> {
    private SNode wordStore;
    @Override
    protected void initialize(TransformationMenuContext _context) {
      super.initialize(_context);
      wordStore = new Computable<SNode>() {
        public SNode compute() {
          return SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(_context.getNode(), CONCEPTS.Dictionary$PC, false, false), LINKS.wordStore$xXVG);
        }
      }.compute();
    }

    @NotNull
    @Override
    public List<TransformationMenuItem> createItems(@NotNull TransformationMenuContext context) {
      context.getEditorMenuTrace().pushTraceInfo();
      context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("transformation menu group", new SNodePointer("r:7061a567-a3c0-4126-b0e7-6588543d98ff(dictionary.editor)", "3465915202994348824")));
      try {
        return super.createItems(context);
      } finally {
        context.getEditorMenuTrace().popTraceInfo();
      }
    }
    @Override
    protected List<MenuPart<TransformationMenuItem, TransformationMenuContext>> getParts() {
      return Arrays.<MenuPart<TransformationMenuItem, TransformationMenuContext>>asList(new TMP_Action_z0o12k_a1a(), new TMP_Action_z0o12k_b1a());
    }
    private class TMP_Action_z0o12k_a1a extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
      @Nullable
      protected TransformationMenuItem createItem(TransformationMenuContext context) {
        Item item = new Item(context);
        String description;
        try {
          description = "single item: " + item.getLabelText("");
        } catch (Throwable t) {
          Logger.getLogger(getClass()).error("Exception while executing getText of the item " + item, t);
          return null;
        }
        context.getEditorMenuTrace().pushTraceInfo();
        try {
          context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase(description, new SNodePointer("r:7061a567-a3c0-4126-b0e7-6588543d98ff(dictionary.editor)", "3465915202994353110")));
          item.setTraceInfo(context.getEditorMenuTrace().getTraceInfo());
        } finally {
          context.getEditorMenuTrace().popTraceInfo();
        }
        return item;
      }

      private class Item extends ActionItemBase implements SubstituteCompletionActionItem {
        private final TransformationMenuContext _context;
        private EditorMenuTraceInfo myEditorMenuTraceInfo;
        private Item(TransformationMenuContext context) {
          _context = context;
        }
        private void setTraceInfo(EditorMenuTraceInfo info) {
          myEditorMenuTraceInfo = info;
        }
        @Nullable
        @Override
        public String getLabelText(String pattern) {
          return pattern;
        }

        @Override
        public void execute(@NotNull String pattern) {
          SNode newWord = createNounWord_z0o12k_a0a0a0b0(pattern);
          ListSequence.fromList(SLinkOperations.getChildren(wordStore, LINKS.nouns$4ad6)).addElement(newWord);
          SLinkOperations.setTarget(_context.getNode(), LINKS.originalWord$3zic, newWord);
        }

        @Override
        public boolean canExecute(@NotNull final String pattern) {
          return (ListSequence.fromList(SLinkOperations.getChildren(wordStore, LINKS.nouns$4ad6)).findFirst(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return Objects.equals(BaseConcept__BehaviorDescriptor.getPresentation_idhEwIMiw.invoke(it), pattern);
            }
          }) == null) && (pattern != null && pattern.length() > 0);
        }

        @Override
        public String getShortDescriptionText(@NotNull String pattern) {
          return "Add new concept to store";
        }


        @Override
        public EditorMenuTraceInfo getTraceInfo() {
          return myEditorMenuTraceInfo;
        }

        public void customize(String pattern, EditorMenuItemStyle style) {
          EditorMenuItemModifyingCustomizationContext modifyingContext = new EditorMenuItemModifyingCustomizationContext(_context.getNode(), null, null, null);
          SAbstractConcept outputConcept = null;
          EditorMenuItemCompositeCustomizationContext compositeContext = new EditorMenuItemCompositeCustomizationContext(modifyingContext, new CompletionMenuItemCustomizationContext(new CompletionItemInformation(null, outputConcept, getLabelText(pattern), getShortDescriptionText(pattern))));
          for (EditorMenuItemCustomizer customizer : CollectionSequence.fromCollection(_context.getCustomizers())) {
            customizer.customize(style, compositeContext);
          }
        }
      }

    }
    private class TMP_Action_z0o12k_b1a extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
      @Nullable
      protected TransformationMenuItem createItem(TransformationMenuContext context) {
        Item item = new Item(context);
        String description;
        try {
          description = "single item: " + item.getLabelText("");
        } catch (Throwable t) {
          Logger.getLogger(getClass()).error("Exception while executing getText of the item " + item, t);
          return null;
        }
        context.getEditorMenuTrace().pushTraceInfo();
        try {
          context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase(description, new SNodePointer("r:7061a567-a3c0-4126-b0e7-6588543d98ff(dictionary.editor)", "3465915202994425552")));
          item.setTraceInfo(context.getEditorMenuTrace().getTraceInfo());
        } finally {
          context.getEditorMenuTrace().popTraceInfo();
        }
        return item;
      }

      private class Item extends ActionItemBase implements SubstituteCompletionActionItem {
        private final TransformationMenuContext _context;
        private EditorMenuTraceInfo myEditorMenuTraceInfo;
        private Item(TransformationMenuContext context) {
          _context = context;
        }
        private void setTraceInfo(EditorMenuTraceInfo info) {
          myEditorMenuTraceInfo = info;
        }
        @Nullable
        @Override
        public String getLabelText(String pattern) {
          return pattern;
        }

        @Override
        public void execute(@NotNull String pattern) {
          SNode newWord = createNounWord_z0o12k_a0a0a1b0(pattern);
          ListSequence.fromList(SLinkOperations.getChildren(wordStore, LINKS.nouns$4ad6)).addElement(newWord);
          SLinkOperations.setTarget(_context.getNode(), LINKS.originalWord$3zic, newWord);
        }

        @Override
        public boolean canExecute(@NotNull final String pattern) {
          return (ListSequence.fromList(SLinkOperations.getChildren(wordStore, LINKS.nouns$4ad6)).findFirst(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return Objects.equals(BaseConcept__BehaviorDescriptor.getPresentation_idhEwIMiw.invoke(it), pattern);
            }
          }) == null) && (pattern != null && pattern.length() > 0);
        }

        @Override
        public String getShortDescriptionText(@NotNull String pattern) {
          return "Do not use!";
        }


        @Override
        public EditorMenuTraceInfo getTraceInfo() {
          return myEditorMenuTraceInfo;
        }

        public void customize(String pattern, EditorMenuItemStyle style) {
          EditorMenuItemModifyingCustomizationContext modifyingContext = new EditorMenuItemModifyingCustomizationContext(_context.getNode(), null, null, null);
          SAbstractConcept outputConcept = null;
          EditorMenuItemCompositeCustomizationContext compositeContext = new EditorMenuItemCompositeCustomizationContext(modifyingContext, new CompletionMenuItemCustomizationContext(new CompletionItemInformation(null, outputConcept, getLabelText(pattern), getShortDescriptionText(pattern))));
          for (EditorMenuItemCustomizer customizer : CollectionSequence.fromCollection(_context.getCustomizers())) {
            customizer.customize(style, compositeContext);
          }
        }
      }

    }
  }
  private static SNode createNounWord_z0o12k_a0a0a0b0(String p0) {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.NounWord$Ad);
    n0.setProperty(PROPS.name$MnvL, p0);
    return n0.getResult();
  }
  private static SNode createNounWord_z0o12k_a0a0a1b0(String p0) {
    SNodeBuilder n0 = new SNodeBuilder().init(CONCEPTS.NounWord$Ad);
    n0.setProperty(PROPS.name$MnvL, p0);
    return n0.getResult();
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink originalWord$3zic = MetaAdapterFactory.getReferenceLink(0x1e23d6051cdb4db4L, 0x810f1fa070d0e977L, 0x3019678390111862L, 0x3019678390111863L, "originalWord");
    /*package*/ static final SReferenceLink wordStore$xXVG = MetaAdapterFactory.getReferenceLink(0x1e23d6051cdb4db4L, 0x810f1fa070d0e977L, 0x3019678390138204L, 0x3019678390179b46L, "wordStore");
    /*package*/ static final SContainmentLink nouns$4ad6 = MetaAdapterFactory.getContainmentLink(0x1e23d6051cdb4db4L, 0x810f1fa070d0e977L, 0x3b06478f679138bbL, 0x3b06478f679138c1L, "nouns");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept NounWord$Ad = MetaAdapterFactory.getConcept(0x1e23d6051cdb4db4L, 0x810f1fa070d0e977L, 0x3b06478f679138c0L, "dictionary.structure.NounWord");
    /*package*/ static final SConcept Dictionary$PC = MetaAdapterFactory.getConcept(0x1e23d6051cdb4db4L, 0x810f1fa070d0e977L, 0x3019678390138204L, "dictionary.structure.Dictionary");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
